# **************************************************************************** #
#                                                                              #
#    Host: e3r7p3.42roma.it                                           /_/      #
#    File: docker-compose.yml                                      ( o.o )     #
#    Created: 2025/07/13 15:14:40 | By: atucci <atucci@student.42  > ^ <       #
#    Updated: 2025/07/24 17:06:33                                   /          #
#    OS: Linux 6.5.0-44-generic x86_64 | CPU: Intel(R) Core(TM) i (|_|)_)      #
#                                                                              #
# **************************************************************************** #

version: "3.9"

# Define all services needed for the mandatory part here
services:

# MariaDB container
# - Should store and serve the WordPress database
# - Requires secure credentials via environment or secrets
# - Mounts a volume for database persistence
# - Should initialize with proper user and password settings
  mariadb:
    build:
      context: ./requirements/mariadb
      dockerfile: Dockerfile
    image: mariadb # naming convention
    container_name: mariadb
    restart: always #check
    volumes:
    - wordpress_db_data:/var/lib/mysql
    - ./secrets/db_root_password.txt:/run/secrets/db_root_password.txt:ro
    - ./secrets/db_user.txt:/run/secrets/db_user.txt:ro
    - ./secrets/db_user_password.txt:/run/secrets/db_user_password.txt:ro
    environment:
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db_root_password.txt
      - MYSQL_DATABASE=wordpress
      - MYSQL_USER_FILE=/run/secrets/db_user.txt
      - MYSQL_PASSWORD_FILE=/run/secrets/db_user_password.txt
    networks:
      - app-network

# WordPress container (PHP-FPM only, no web server)
# - Should serve PHP application logic for WordPress
# - Should connect to the database (MariaDB)
# - Should use environment variables for configuration
# - Mounts a volume for WordPress site files
  wordpress:
    build:
      context: ./requirements/wordpress
      dockerfile: Dockerfile
    image: wordpress
    container_name: wordpress
    restart: always
    volumes:
      - wordpress_site_data:/var/www/html
      - ./secrets/db_user.txt:/run/secrets/db_user.txt:ro
      - ./secrets/db_user_password.txt:/run/secrets/db_user_password.txt:ro
    environment:
      - WORDPRESS_DB_HOST=mariadb:3306
      - WORDPRESS_DB_NAME=wordpress
      - WORDPRESS_DB_USER_FILE=/run/secrets/db_user.txt
      - WORDPRESS_DB_PASSWORD_FILE=/run/secrets/db_user_password.txt
      - WORDPRESS_AD=amatta
      - WORDPRESS_AD_PASSWORD=mandolino
    depends_on:
     - mariadb
    networks:
     - app-network

# NGINX reverse proxy container
# - Should act as the single entry point (port 443 only)
# - Needs to use TLSv1.2 or TLSv1.3
# - Should proxy requests to WordPress
# - Must depend on WordPress and possibly MariaDB (indirectly)
# - Mount certificate files or secrets as needed
  nginx:
    build:
      context: ./requirements/nginx
      dockerfile: Dockerfile
    image: nginx
    container_name: nginx
    restart: always
    ports:
      - "443:443"
    volumes:
      - wordpress_site_data:/var/www/html:ro
      - ./secrets/certs/:/etc/ssl/certs/
      - ./secrets/private:/etc/ssl/private
    depends_on:
      - wordpress #check this
    networks:
      - app-network

# Define volumes (named) for persistence
# - One for WordPress files
# - One for WordPress database data

# Define a custom network
# - All containers must use the same internal bridge network
# - No use of "network: host" or deprecated "links"

#TODO:bonus stuff#

# OPTIONAL: Redis cache service (bonus)
# - Used to improve WordPress performance
# - WordPress must be configured to use Redis

# OPTIONAL: FTP server (bonus)
# - Provides file transfer access to WordPress volume
# - Requires mounting the same volume as WordPress files

# OPTIONAL: Static website service (bonus)
# - Simple static web page (HTML, JS, CSS)
# - Could be served by a lightweight web server (e.g., nginx or httpd)

# OPTIONAL: Adminer (bonus)
# - Lightweight DB management interface
# - Should connect to the MariaDB container internally

# OPTIONAL: Your own service (bonus)
# - Justify its use and isolate it in a separate container
# - Follow same rules for volumes, env vars, and networks

# Define named volumes here
# - wordpress_db_data:
# - wordpress_site_data:
volumes:
  wordpress_db_data:
  wordpress_site_data:
#TODO - bind the volume to the virtual machine!

# Define custom networks here
# - app-network:
networks:
  app-network:
    driver: bridge
